// DO NOT EDIT: generated by generator/generate.jsonnet
local schema = import './schema.libsonnet';
{
  '#': {
    filename: 'main.libsonnet',
    help: 'Jsonnet library to generate XML/HTML tags.\n## Install\n\n```\njb install @main\n```\n\n## Usage\n\n```jsonnet\nlocal jsonml-libsonnet = import "/main.libsonnet"\n```\n',
    'import': '/main.libsonnet',
    installTemplate: '\n## Install\n\n```\njb install %(url)s@%(version)s\n```\n',
    name: 'jsonml-libsonnet',
    url: '',
    usageTemplate: '\n## Usage\n\n```jsonnet\nlocal %(name)s = import "%(import)s"\n```\n',
    version: 'main',
  },
  attribute+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'name', type: 'string' }, { default: null, enums: null, name: 'value', type: ['string', 'number', 'boolean', 'null'] }], help: '' } },
      new(name, value):
        self.withType()
        + self.withName(name)
        + self.withValue(value),
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'attribute',
      },
      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string', 'number', 'boolean', 'null'] }], help: '' } },
      withValue(value): {
        value: value,
      },
    },
  literal+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'value', type: 'string' }], help: '' } },
      new(value):
        self.withType()
        + self.withValue(value),
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'literal',
      },
      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withValue(value): {
        value: value,
      },
    },
  tag+:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(name):
        self.withType()
        + {
          manifest(): std.manifestXmlJsonml(schema['$defs'].tag.toJsonML(self)),
        }
        + self.withName(name),
      '#withAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAttributes(value): {
        attributes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAttributesMixin(value): {
        attributes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withElements': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withElements(value): {
        elements:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withElementsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withElementsMixin(value): {
        elements+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withType': { 'function': { args: [], help: '' } },
      withType(): {
        type: 'tag',
      },
    },
}
